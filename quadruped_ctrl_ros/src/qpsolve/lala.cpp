/*
    This file is part of quadruped_ctrl_ros - learning material for quadruped control

    quadruped_ctrl_ros is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    quadruped_ctrl_ros is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with quadruped_ctrl_ros.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * \file ctrl_server.cpp
 * \date 25/10/2024
 * \author pattylo
 * \copyright (c) AIRO-LAB, RCUAS of Hong Kong Polytechnic University
 * \brief classes for quadruped_ctrl_ros_uav using airo_control_interface
 */

#include <ros_utilities/ros_utilities.h>
#include "quadruped_ctrl_ros/osqpwrapper.h"

int main(int argc, char **argv)
{
    ros::init(argc, argv, "lala");
    ros::NodeHandle nh("~");

    
    Eigen::Matrix<double, 12, 12> G;
    G <<  72.2703431626241013,   6.6419389410159502,  34.3261230123903189,  64.3194886083634429,   3.5375655482388670,  18.2824490335750234,  75.9437377484977816,  -3.9500748465699336, -20.4143332685874448,  68.3312571197020731,  -6.8793090194300683, -35.5528723973910630,
        6.6419389410159502,  93.9207332416189757,  -9.6912319259634980, -20.4538295860440229,  82.6241578371956393,  29.8441175164080121,  20.7254010675318057,  56.1012976864857578, -30.2403665989346599,  -6.2083361698080859,  45.7176893406153368,   9.0585635053662532,
        34.3261230123903260,  -9.6912319259634980,  75.7048031793755740,  34.3323217308050985,  -9.6929819988680226,  56.7552841601522076,  34.3310824632334572,  -9.6926321187067597,  41.8602895722995427,  34.3253751354153991,  -9.6910207792163554,  23.8808556852677860,
        64.3194886083634429, -20.4538295860440229,  34.3323217308050985,  88.1963743749292775, -10.8939217170928266,  18.2857505352753691,  52.0821596516067444,  12.1642427732860412, -20.4180197525958995,  75.4907955486355604,  21.1848099783397785, -35.5592926460380880,
        3.5375655482388675,  82.6241578371956393,  -9.6929819988680226, -10.8939217170928266,  77.0868228132835469,  29.8495068602833733,  11.0385635039756824,  62.6496270237354125, -30.2458274987059177,  -3.3066242163977142,  57.1153158427857193,   9.0601993290330238,
        18.2824490335750234,  29.8441175164080121,  56.7552841601522076,  18.2857505352753691,  29.8495068602833733,  74.7607425756876296,  18.2850904885171204,  29.8484294054531567,  24.5289491386047231,  18.2820507065436679,  29.8434672906799427,  42.4199319499459193,
        75.9437377484977816,  20.7254010675318057,  34.3310824632334572,  52.0821596516067444,  11.0385635039756806,  18.2850904885171239,  88.6681163893772606, -12.3257509846076196, -20.4172827389457616,  64.6219088008902105, -21.4660869004267951, -35.5580090894352949,
        -3.9500748465699340,  56.1012976864857578,  -9.6926321187067597,  12.1642427732860430,  62.6496270237354125,  29.8484294054531603, -12.3257509846076196,  78.7303423729349703, -30.2447357381925883,   3.6922038520965610,  84.5823708192712758,   9.0598722899440531,
        -20.4143332685874448, -30.2403665989346599,  41.8602895722995427, -20.4180197525958995, -30.2458274987059177,  24.5289491386047231, -20.4172827389457616, -30.2447357381925883,  76.8832381707997570, -20.4138884933413571, -30.2397077399693046,  59.0217165226165150,
        68.3312571197020731,  -6.2083361698080859,  34.3253751354153920,  75.4907955486355604,  -3.3066242163977146,  18.2820507065436679,  64.6219088008901963,   3.6922038520965614, -20.4138884933413571,  72.0313159505949869,   6.4302101220584120, -35.5520977927364967,
        -6.8793090194300692,  45.7176893406153368,  -9.6910207792163554,  21.1848099783397785,  57.1153158427857122,  29.8434672906799427, -21.4660869004267987,  84.5823708192712616, -30.2397077399693011,   6.4302101220584120,  95.6301167698982511,   9.0583661428191000,
        -35.5528723973910630,   9.0585635053662532,  23.8808556852677860, -35.5592926460380880,   9.0601993290330238,  42.4199319499459193, -35.5580090894352949,   9.0598722899440531,  59.0217165226165008, -35.5520977927364967,   9.0583661428191018,  77.1795243477116060;

    Eigen::Matrix<double, 12, 1> g0;
    g0 <<
        -0.2624879123403962,
        -8.1152884053960062,
        -5895.0256771911972464,
        -0.5038533876425387,
        -8.2131519927088608,
        -5894.5435796952397141,
        -0.1369900223153361,
        -8.4494503205464362,
        -5895.1593208751774000,
        -0.3769764072898765,
        -8.5419745918982404,
        -5894.6816063515634596;

    Eigen::Matrix<double, 12, 20> CIT;
    CIT <<
        1.0000000000000000, -1.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000,  0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 1.0000000000000000,-1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.4000000000000000, 0.4000000000000000, 0.4000000000000000, 0.4000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.0000000000000000,-1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.0000000000000000,-1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.4000000000000000, 0.4000000000000000, 0.4000000000000000, 0.4000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.0000000000000000,-1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.0000000000000000,-1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.4000000000000000, 0.4000000000000000, 0.4000000000000000, 0.4000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.0000000000000000,-1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.0000000000000000,-1.0000000000000000, 0.0000000000000000,
        0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.4000000000000000, 0.4000000000000000, 0.4000000000000000, 0.4000000000000000, 1.0000000000000000;
    Eigen::Matrix<double, 20, 12> CI = CIT.transpose();

    Eigen::Matrix<double, 20, 1> ci;
    ci.setZero();

    Eigen::Matrix<double, 20, 1> ci_inf;
    ci_inf.setConstant(INFINITY);

    osqpwrapper solveqp;
    solveqp.qp_opt(G, CI, g0, ci_inf, ci);

    Eigen::VectorXd sol = solveqp.getQpsol();

    std::cout<<sol<<std::endl;

    //   0.0087719135769835,   
    // 0.1104138382612131,  
    // 30.5560764024483298,  
    //  0.0084614346154662,   
    // 0.1102257422127400,  
    // 29.9001150523387977,   
    // 0.0090813885738520,   
    // 0.1098153315722577,  
    // 28.9443692323215558,   
    // 0.0085579139393622,   
    // 0.1096687328631302,  
    // 28.3173795024376993


    return 0;
}